function escapeHtml(text){const map={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;',};return text.replace(/[&<>"']/g,(char)=> map[char] || char);}export function generateComponentHTML(metadata){var _a,_b,_c,_d,_e;const propsHtml=metadata.props .map((prop)=> ` <tr> <td><code>${escapeHtml(prop.name)}</code></td> <td><code>${escapeHtml(prop.type)}</code></td> <td>${prop.default !==undefined ? escapeHtml(String(prop.default)):'N/A'}</td> <td>${prop.description ? escapeHtml(prop.description):'—'}</td> <td>${prop.required ? 'Yes':'No'}</td> </tr> `).join('');const eventsHtml=metadata.events .map((event)=> ` <tr> <td><code>${escapeHtml(event.name)}</code></td> <td><code>${escapeHtml(event.detail)}</code></td> <td>${event.description ? escapeHtml(event.description):'—'}</td> </tr> `).join('');const slotsHtml=((_a=metadata.slots)!==null && _a !==void 0 ? _a:[]).map((slot)=> ` <tr> <td><code>${escapeHtml(slot.name)}</code></td> <td>${slot.description ? escapeHtml(slot.description):'—'}</td> </tr> `).join('');const cssPropsHtml=((_b=metadata.cssProps)!==null && _b !==void 0 ? _b:[]).map((prop)=> ` <tr> <td><code>${escapeHtml(prop.name)}</code></td> <td><code>${prop.default ? escapeHtml(prop.default):'N/A'}</code></td> <td>${prop.description ? escapeHtml(prop.description):'—'}</td> </tr> `).join('');const examplesHtml=((_c=metadata.examples)!==null && _c !==void 0 ? _c:[]).map((example)=> ` <div class="example"> <h4>${escapeHtml(example.title)}</h4> ${example.description ? `<p>${escapeHtml(example.description)}</p>`:''}<div class="example-code"> <pre><code>${escapeHtml(example.code)}</code></pre> </div> <div class="example-preview"> ${example.code}</div> </div> `).join('');return ` <div class="component-doc"> <h2 id="${escapeHtml(metadata.tag)}">${escapeHtml(metadata.name)}</h2> <p class="component-tag"><code>&lt;${escapeHtml(metadata.tag)}&gt;</code></p> ${metadata.category ? `<p class="component-category"><strong>Category:</strong> ${metadata.category}</p>`:''}<p class="description">${escapeHtml(metadata.description)}</p> ${metadata.examples ? `<section class="examples"><h3>Examples</h3>${examplesHtml}</section>`:''}${metadata.props.length > 0 ? ` <section class="props"> <h3>Properties</h3> <table> <thead> <tr> <th>Name</th> <th>Type</th> <th>Default</th> <th>Description</th> <th>Required</th> </tr> </thead> <tbody> ${propsHtml}</tbody> </table> </section> `:''}${metadata.events.length > 0 ? ` <section class="events"> <h3>Events</h3> <table> <thead> <tr> <th>Event</th> <th>Detail Type</th> <th>Description</th> </tr> </thead> <tbody> ${eventsHtml}</tbody> </table> </section> `:''}${((_d=metadata.slots)!==null && _d !==void 0 ? _d:[]).length > 0 ? ` <section class="slots"> <h3>Slots</h3> <table> <thead> <tr> <th>Name</th> <th>Description</th> </tr> </thead> <tbody> ${slotsHtml}</tbody> </table> </section> `:''}${((_e=metadata.cssProps)!==null && _e !==void 0 ? _e:[]).length > 0 ? ` <section class="css-props"> <h3>CSS Custom Properties</h3> <table> <thead> <tr> <th>Property</th> <th>Default</th> <th>Description</th> </tr> </thead> <tbody> ${cssPropsHtml}</tbody> </table> </section> `:''}${metadata.since ? `<p class="since"><small><strong>Since:</strong> v${escapeHtml(metadata.since)}</small></p>`:''}</div> `;}export function generateIndexHTML(registry){const components=registry.list();const categories=registry.getCategories();const categoryHtml=categories .map((category)=>{const categoryComponents=registry.listByCategory(category);const componentsListHtml=categoryComponents .map((meta)=> ` <div class="component-link"> <a href="#${escapeHtml(meta.tag)}">${escapeHtml(meta.name)}</a> <p class="component-desc">${escapeHtml(meta.description)}</p> </div> `).join('');return ` <div class="category"> <h3>${category}</h3> <div class="components-list"> ${componentsListHtml}</div> </div> `;}).join('');const componentsHtml=components.map((meta)=> generateComponentHTML(meta)).join('');return `<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width,initial-scale=1.0"> <title>Cortex UI Components(${components.length}components)</title> <style> *{margin:0;padding:0;box-sizing:border-box;}body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,sans-serif;line-height:1.6;color:#333;background:#f5f5f5;}header{background:#1a1a1a;color:white;padding:2rem;text-align:center;}header h1{font-size:2.5rem;margin-bottom:0.5rem;}header p{font-size:1.1rem;opacity:0.9;}.container{max-width:1200px;margin:0 auto;padding:2rem;}nav{background:white;padding:2rem;margin-bottom:2rem;border-radius:8px;box-shadow:0 2px 4px rgba(0,0,0,0.1);}nav h2{font-size:1.5rem;margin-bottom:1.5rem;}.category{margin-bottom:2rem;}.category h3{font-size:1.2rem;margin-bottom:1rem;color:#007bff;}.components-list{display:grid;grid-template-columns:repeat(auto-fill,minmax(250px,1fr));gap:1rem;}.component-link{padding:1rem;background:#f9f9f9;border:1px solid #e0e0e0;border-radius:6px;text-decoration:none;transition:all 0.2s;}.component-link a{color:#007bff;text-decoration:none;font-weight:600;font-size:1.1rem;}.component-link a:hover{color:#0056b3;text-decoration:underline;}.component-desc{margin-top:0.5rem;color:#666;font-size:0.9rem;}.documentation{background:white;padding:2rem;border-radius:8px;box-shadow:0 2px 4px rgba(0,0,0,0.1);}.component-doc{margin-bottom:3rem;padding-bottom:2rem;border-bottom:2px solid #e0e0e0;}.component-doc:last-child{border-bottom:none;}.component-doc h2{font-size:2rem;margin-bottom:0.5rem;}.component-tag{color:#666;font-size:0.95rem;}.component-category{color:#007bff;font-size:0.95rem;}.description{margin:1rem 0;font-size:1.05rem;color:#555;}section{margin:2rem 0;}section h3{font-size:1.3rem;margin-bottom:1rem;color:#333;}table{width:100%;border-collapse:collapse;margin:1rem 0;font-size:0.95rem;}thead{background:#f0f0f0;}th{padding:0.75rem;text-align:left;font-weight:600;border:1px solid #ddd;}td{padding:0.75rem;border:1px solid #ddd;}code{background:#f5f5f5;padding:0.2rem 0.4rem;border-radius:3px;font-family:'Courier New',Courier,monospace;font-size:0.9em;}.examples{background:#f9f9f9;padding:1.5rem;border-radius:6px;border-left:4px solid #007bff;}.example{margin-bottom:1.5rem;}.example h4{margin-bottom:0.5rem;color:#333;}.example-code{background:#f0f0f0;padding:1rem;border-radius:4px;overflow-x:auto;margin:0.5rem 0;}.example-code code{background:none;padding:0;color:#333;}.example-preview{padding:1rem;background:white;border:1px solid #ddd;border-radius:4px;margin:0.5rem 0;}.since{color:#999;margin-top:1rem;}footer{text-align:center;padding:2rem;color:#666;font-size:0.9rem;}@media(max-width:768px){.components-list{grid-template-columns:1fr;}.container{padding:1rem;}header h1{font-size:1.8rem;}}</style> </head> <body> <header> <h1>Cortex UI Component Library</h1> <p>${components.length}components documented and ready to use</p> </header> <div class="container"> <nav> <h2>Components by Category</h2> ${categoryHtml}</nav> <div class="documentation"> ${componentsHtml}</div> </div> <footer> <p>Generated from component metadata. Last updated:${new Date().toISOString().split('T')[0]}</p> </footer> <script type="module"> import('../../dist/ui/ui-bundle.js').catch(()=>{console.log('UI bundle not yet built. Run:npm run build:ui');});</script> </body> </html>`;}export function generateDocumentation(registry){return generateIndexHTML(registry);}import{describe,it}from 'node:test';import{strict as assert}from 'node:assert';import{ComponentRegistry}from './metadata.js';import{generateComponentHTML,generateIndexHTML}from './doc-generator.js';describe('Doc Generator',()=>{describe('generateComponentHTML',()=>{it('should generate HTML for a component',()=>{const registry=new ComponentRegistry();registry.register({tag:'ui-button',name:'Button',description:'A customizable button',props:[{name:'variant',type:'string',description:'Visual style',default:'"primary"',},],events:[{name:'click',detail:'MouseEvent',description:'When clicked',},],});const html=generateComponentHTML(registry.get('ui-button'));assert(html.includes('ui-button'));assert(html.includes('Button'));assert(html.includes('A customizable button'));assert(html.includes('variant'));assert(html.includes('click'));});it('should handle components with examples',()=>{const registry=new ComponentRegistry();registry.register({tag:'ui-input',name:'Input',description:'Text input field',examples:[{title:'Basic Input',code:'<ui-input></ui-input>',},],props:[],events:[],});const html=generateComponentHTML(registry.get('ui-input'));assert(html.includes('Basic Input'));assert(html.includes('ui-input'));});it('should handle optional fields',()=>{const registry=new ComponentRegistry();registry.register({tag:'ui-test',name:'Test',description:'Test component',props:[],events:[],});const html=generateComponentHTML(registry.get('ui-test'));assert(html.includes('Test'));assert.doesNotThrow(()=> generateComponentHTML(registry.get('ui-test')));});});describe('generateIndexHTML',()=>{it('should generate index HTML with all components',()=>{const registry=new ComponentRegistry();registry.register({tag:'ui-button',name:'Button',category:'Buttons & Actions',description:'A customizable button',props:[],events:[],});registry.register({tag:'ui-input',name:'Input',category:'Basic Input Controls',description:'Text input field',props:[],events:[],});const html=generateIndexHTML(registry);assert(html.includes('Cortex UI Component Library'));assert(html.includes('Button'));assert(html.includes('Input'));assert(html.includes('Buttons & Actions'));assert(html.includes('Basic Input Controls'));});it('should organize components by category',()=>{const registry=new ComponentRegistry();registry.register({tag:'ui-button',name:'Button',category:'Buttons & Actions',description:'A customizable button',props:[],events:[],});registry.register({tag:'ui-fab',name:'Floating Action Button',category:'Buttons & Actions',description:'A floating action button',props:[],events:[],});const html=generateIndexHTML(registry);const buttonIndex=html.indexOf('ui-button');const fabIndex=html.indexOf('ui-fab');assert(buttonIndex > -1);assert(fabIndex > -1);});it('should include basic HTML structure',()=>{const registry=new ComponentRegistry();registry.register({tag:'ui-button',name:'Button',description:'A button',props:[],events:[],});const html=generateIndexHTML(registry);assert(html.includes('<!DOCTYPE html>'));assert(html.includes('<html'));assert(html.includes('<head>'));assert(html.includes('<body>'));assert(html.includes('</html>'));});it('should include component count in title',()=>{const registry=new ComponentRegistry();registry.register({tag:'ui-button',name:'Button',description:'A button',props:[],events:[],});registry.register({tag:'ui-input',name:'Input',description:'An input',props:[],events:[],});const html=generateIndexHTML(registry);assert(html.includes('2'));});});});export class ComponentRegistry{constructor(){this.metadata=new Map();}register(meta){if(this.metadata.has(meta.tag)){throw new Error(`Component ${meta.tag}is already registered`);}this.metadata.set(meta.tag,meta);}get(tag){return this.metadata.get(tag);}list(){return Array.from(this.metadata.values());}listByCategory(category){return this.list().filter((meta)=> meta.category===category);}getCategories(){const categories=new Set();for(const meta of this.metadata.values()){if(meta.category){categories.add(meta.category);}}return Array.from(categories).sort();}size(){return this.metadata.size;}clear(){this.metadata.clear();}}export const globalRegistry=new ComponentRegistry();import{describe,it}from 'node:test';import{strict as assert}from 'node:assert';import{ComponentRegistry,}from './metadata.js';describe('ComponentMetadata',()=>{describe('PropSchema validation',()=>{it('should require name and type properties',()=>{const validProp={name:'variant',type:'string',description:'Button variant',};assert.equal(validProp.name,'variant');assert.equal(validProp.type,'string');});it('should support union types as string literal',()=>{const unionProp={name:'variant',type:'"primary" | "secondary" | "ghost"',description:'Button variant',};assert.equal(unionProp.type,'"primary" | "secondary" | "ghost"');});it('should support optional default value',()=>{const propWithDefault={name:'disabled',type:'boolean',default:false,description:'Is button disabled',};assert.equal(propWithDefault.default,false);});it('should support optional required flag',()=>{const requiredProp={name:'onClick',type:'(event:Event)=> void',required:true,};assert.equal(requiredProp.required,true);});});describe('EventSchema validation',()=>{it('should require name and detail type',()=>{const event={name:'click',detail:'CustomEvent<void>',description:'Fired when button is clicked',};assert.equal(event.name,'click');assert.equal(event.detail,'CustomEvent<void>');});});describe('ComponentMetadata validation',()=>{it('should require tag name and description',()=>{const metadata={tag:'ui-button',name:'Button',description:'A customizable button component',props:[],events:[],};assert.equal(metadata.tag,'ui-button');assert.equal(metadata.name,'Button');});it('should support optional category',()=>{const metadata={tag:'ui-button',name:'Button',category:'Buttons & Actions',description:'A customizable button component',props:[],events:[],};assert.equal(metadata.category,'Buttons & Actions');});it('should support optional examples',()=>{var _a;const metadata={tag:'ui-button',name:'Button',description:'A customizable button component',examples:[{title:'Primary Button',code:'<ui-button variant="primary">Click me</ui-button>',},],props:[],events:[],};assert.equal((_a=metadata.examples)===null || _a===void 0 ? void 0:_a.length,1);assert.equal(metadata.examples[0].title,'Primary Button');});it('should support optional slots',()=>{var _a;const metadata={tag:'ui-button',name:'Button',description:'A customizable button component',slots:[{name:'default',description:'The button content',},],props:[],events:[],};assert.equal((_a=metadata.slots)===null || _a===void 0 ? void 0:_a.length,1);assert.equal(metadata.slots[0].name,'default');});it('should support optional CSS properties',()=>{var _a;const metadata={tag:'ui-button',name:'Button',description:'A customizable button component',cssProps:[{name:'--ui-button-background-color',description:'Background color of the button',default:'var(--ui-color-primary)',},],props:[],events:[],};assert.equal((_a=metadata.cssProps)===null || _a===void 0 ? void 0:_a.length,1);assert.equal(metadata.cssProps[0].name,'--ui-button-background-color');});});describe('ComponentRegistry',()=>{it('should register and retrieve metadata',()=>{const registry=new ComponentRegistry();const metadata={tag:'ui-button',name:'Button',description:'A customizable button component',props:[],events:[],};registry.register(metadata);const retrieved=registry.get('ui-button');assert.equal(retrieved===null || retrieved===void 0 ? void 0:retrieved.tag,'ui-button');assert.equal(retrieved===null || retrieved===void 0 ? void 0:retrieved.name,'Button');});it('should throw error when registering duplicate tag',()=>{const registry=new ComponentRegistry();const metadata={tag:'ui-button',name:'Button',description:'A customizable button component',props:[],events:[],};registry.register(metadata);assert.throws(()=> registry.register(metadata),/already registered/i);});it('should list all registered components',()=>{const registry=new ComponentRegistry();const button={tag:'ui-button',name:'Button',description:'A customizable button component',props:[],events:[],};const input={tag:'ui-input',name:'Input',description:'A text input component',props:[],events:[],};registry.register(button);registry.register(input);const all=registry.list();assert.equal(all.length,2);assert.equal(all[0].tag,'ui-button');assert.equal(all[1].tag,'ui-input');});it('should list components by category',()=>{const registry=new ComponentRegistry();const button={tag:'ui-button',name:'Button',category:'Buttons & Actions',description:'A customizable button component',props:[],events:[],};const fab={tag:'ui-fab',name:'Floating Action Button',category:'Buttons & Actions',description:'A floating action button',props:[],events:[],};const input={tag:'ui-input',name:'Input',category:'Basic Input Controls',description:'A text input component',props:[],events:[],};registry.register(button);registry.register(fab);registry.register(input);const buttonsCategory=registry.listByCategory('Buttons & Actions');assert.equal(buttonsCategory.length,2);assert.equal(buttonsCategory[0].tag,'ui-button');assert.equal(buttonsCategory[1].tag,'ui-fab');const inputsCategory=registry.listByCategory('Basic Input Controls');assert.equal(inputsCategory.length,1);assert.equal(inputsCategory[0].tag,'ui-input');});it('should return empty array for non-existent category',()=>{const registry=new ComponentRegistry();const empty=registry.listByCategory('Nonexistent');assert.equal(empty.length,0);});it('should return all categories',()=>{const registry=new ComponentRegistry();registry.register({tag:'ui-button',name:'Button',category:'Buttons & Actions',description:'A customizable button component',props:[],events:[],});registry.register({tag:'ui-input',name:'Input',category:'Basic Input Controls',description:'A text input component',props:[],events:[],});const categories=registry.getCategories();assert.equal(categories.length,2);assert(categories.includes('Buttons & Actions'));assert(categories.includes('Basic Input Controls'));});});});import{globalRegistry}from './metadata.js';import{uiButtonMetadata}from './components/button/ui-button.metadata.js';import{uiTextInputMetadata}from './components/text-input/ui-text-input.metadata.js';import{uiCheckboxMetadata}from './components/checkbox/ui-checkbox.metadata.js';import{uiSelectMetadata}from './components/select/ui-select.metadata.js';import{uiLabelMetadata}from './components/label/ui-label.metadata.js';import{uiFormFieldMetadata}from './components/form-field/ui-form-field.metadata.js';import{uiTextareaMetadata}from './components/textarea/ui-textarea.metadata.js';import{uiRadioMetadata}from './components/radio/ui-radio.metadata.js';import{uiToggleMetadata}from './components/toggle/ui-toggle.metadata.js';import{uiNumberInputMetadata}from './components/number-input/ui-number-input.metadata.js';import{uiDatePickerMetadata}from './components/date-picker/ui-date-picker.metadata.js';import{uiAutocompleteMetadata}from './components/autocomplete/ui-autocomplete.metadata.js';import{uiColorPickerMetadata}from './components/color-picker/ui-color-picker.metadata.js';import{uiFileUploadMetadata}from './components/file-upload/ui-file-upload.metadata.js';import{uiModalMetadata}from './components/modal/ui-modal.metadata.js';import{uiAlertMetadata}from './components/alert/ui-alert.metadata.js';import{uiTabsMetadata}from './components/tabs/ui-tabs.metadata.js';import{uiSpinnerMetadata}from './components/spinner/ui-spinner.metadata.js';import{uiPaginationMetadata}from './components/pagination/ui-pagination.metadata.js';import{uiAccordionMetadata}from './components/accordion/ui-accordion.metadata.js';import{uiProgressBarMetadata}from './components/progress-bar/ui-progress-bar.metadata.js';import{uiBreadcrumbMetadata}from './components/breadcrumb/ui-breadcrumb.metadata.js';import{uiStepperMetadata}from './components/stepper/ui-stepper.metadata.js';import{uiBadgeMetadata}from './components/badge/ui-badge.metadata.js';import{uiCardMetadata}from './components/card/ui-card.metadata.js';import{uiDividerMetadata}from './components/divider/ui-divider.metadata.js';import{uiAvatarMetadata}from './components/avatar/ui-avatar.metadata.js';import{uiChipMetadata}from './components/chip/ui-chip.metadata.js';import{uiSkeletonMetadata}from './components/skeleton/ui-skeleton.metadata.js';import{uiLinkMetadata}from './components/link/ui-link.metadata.js';import{uiTooltipMetadata}from './components/tooltip/ui-tooltip.metadata.js';import{uiPopoverMetadata}from './components/popover/ui-popover.metadata.js';import{uiToastMetadata}from './components/toast/ui-toast.metadata.js';import{uiCodeMetadata}from './components/code/ui-code.metadata.js';import{uiTagMetadata}from './components/tag/ui-tag.metadata.js';import{uiEmptyStateMetadata}from './components/empty-state/ui-empty-state.metadata.js';import{uiRatingMetadata}from './components/rating/ui-rating.metadata.js';import{uiStatMetadata}from './components/stat/ui-stat.metadata.js';import{uiProgressCircleMetadata}from './components/progress-circle/ui-progress-circle.metadata.js';import{uiTimelineMetadata}from './components/timeline/ui-timeline.metadata.js';import{uiCarouselMetadata}from './components/carousel/ui-carousel.metadata.js';import{uiSwitchMetadata}from './components/switch/ui-switch.metadata.js';import{uiCopyMetadata}from './components/copy/ui-copy.metadata.js';import{uiResultMetadata}from './components/result/ui-result.metadata.js';import{uiMenuMetadata}from './components/menu/ui-menu.metadata.js';import{uiTableMetadata}from './components/table/ui-table.metadata.js';import{uiSliderMetadata}from './components/slider/ui-slider.metadata.js';import{uiHintMetadata}from './components/hint/ui-hint.metadata.js';import{uiDescriptionListMetadata}from './components/description-list/ui-description-list.metadata.js';export function registerAllComponents(){globalRegistry.register(uiButtonMetadata);globalRegistry.register(uiTextInputMetadata);globalRegistry.register(uiCheckboxMetadata);globalRegistry.register(uiSelectMetadata);globalRegistry.register(uiLabelMetadata);globalRegistry.register(uiFormFieldMetadata);globalRegistry.register(uiTextareaMetadata);globalRegistry.register(uiRadioMetadata);globalRegistry.register(uiToggleMetadata);globalRegistry.register(uiNumberInputMetadata);globalRegistry.register(uiDatePickerMetadata);globalRegistry.register(uiAutocompleteMetadata);globalRegistry.register(uiColorPickerMetadata);globalRegistry.register(uiFileUploadMetadata);globalRegistry.register(uiModalMetadata);globalRegistry.register(uiAlertMetadata);globalRegistry.register(uiTabsMetadata);globalRegistry.register(uiSpinnerMetadata);globalRegistry.register(uiPaginationMetadata);globalRegistry.register(uiAccordionMetadata);globalRegistry.register(uiProgressBarMetadata);globalRegistry.register(uiBreadcrumbMetadata);globalRegistry.register(uiStepperMetadata);globalRegistry.register(uiBadgeMetadata);globalRegistry.register(uiCardMetadata);globalRegistry.register(uiDividerMetadata);globalRegistry.register(uiAvatarMetadata);globalRegistry.register(uiChipMetadata);globalRegistry.register(uiSkeletonMetadata);globalRegistry.register(uiLinkMetadata);globalRegistry.register(uiTooltipMetadata);globalRegistry.register(uiPopoverMetadata);globalRegistry.register(uiToastMetadata);globalRegistry.register(uiCodeMetadata);globalRegistry.register(uiTagMetadata);globalRegistry.register(uiEmptyStateMetadata);globalRegistry.register(uiRatingMetadata);globalRegistry.register(uiStatMetadata);globalRegistry.register(uiProgressCircleMetadata);globalRegistry.register(uiTimelineMetadata);globalRegistry.register(uiCarouselMetadata);globalRegistry.register(uiSwitchMetadata);globalRegistry.register(uiCopyMetadata);globalRegistry.register(uiResultMetadata);globalRegistry.register(uiMenuMetadata);globalRegistry.register(uiTableMetadata);globalRegistry.register(uiSliderMetadata);globalRegistry.register(uiHintMetadata);globalRegistry.register(uiDescriptionListMetadata);}export{globalRegistry};