const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const projectRoot = path.resolve(__dirname, '..');
const distDir = path.join(projectRoot, 'dist');
const typesDir = path.join(distDir, 'types'); // Assuming tsc outputs to dist/types if declarationDir is set

console.log('Bundling TypeScript declaration files...');

// 1. Run tsc to generate individual .d.ts files
// This assumes tsc is configured to output .d.ts files
// If declarationDir is set, they will be in dist/types
// If not, they will be alongside .js files in dist
try {
  console.log('Running tsc to generate declaration files...');
  execSync('tsc', { cwd: projectRoot, stdio: 'inherit' });
} catch (error) {
  console.error('tsc failed:', error.message);
  process.exit(1);
}

// 2. Find all .d.ts files
let allDeclarationFiles = [];
if (fs.existsSync(typesDir)) {
  // If declarationDir was used, collect from there
  function collectFiles(dir) {
    fs.readdirSync(dir).forEach(file => {
      const fullPath = path.join(dir, file);
      if (fs.statSync(fullPath).isDirectory()) {
        collectFiles(fullPath);
      } else if (file.endsWith('.d.ts')) {
        allDeclarationFiles.push(fullPath);
      }
    });
  }
  collectFiles(typesDir);
} else {
  // Otherwise, collect from dist directly
  function collectFiles(dir) {
    fs.readdirSync(dir).forEach(file => {
      const fullPath = path.join(dir, file);
      if (fs.statSync(fullPath).isDirectory()) {
        // Avoid recursing into node_modules or other non-source dirs
        if (!fullPath.includes('node_modules')) {
          collectFiles(fullPath);
        }
      } else if (file.endsWith('.d.ts')) {
        allDeclarationFiles.push(fullPath);
      }
    });
  }
  collectFiles(distDir);
}


// 3. Concatenate them into a single dist/index.d.ts
const outputFilePath = path.join(distDir, 'index.d.ts');
let bundledContent = '';

// Add a header to the bundled file
bundledContent += '// Type definitions for Cortex Framework\n';
bundledContent += '// Project: https://github.com/cortex-web-framework/cortex\n';
bundledContent += '// Definitions by: Cortex Framework Contributors\n';
bundledContent += '// Generated by: @gemini-cli\n\n';


allDeclarationFiles.forEach(filePath => {
  const content = fs.readFileSync(filePath, 'utf8');
  // Remove triple-slash directives and module declarations that might conflict
  const cleanedContent = content
    .replace(/\/\/\/\s*<reference types=".*" \/>/g, '')
    .replace(/declare module ".*" \{/g, '')
    .replace(/declare module ".*" \{/g, '')
    .replace(/export {};/g, '') // Remove empty export statements
    .trim();

  if (cleanedContent) {
    bundledContent += `// From: ${path.relative(projectRoot, filePath)}\n`;
    bundledContent += cleanedContent;
    bundledContent += '\n\n';
  }
});

fs.writeFileSync(outputFilePath, bundledContent);
console.log(`Successfully bundled ${allDeclarationFiles.length} declaration files into ${outputFilePath}`);

// 4. Remove the dist/types directory if it exists
if (fs.existsSync(typesDir)) {
  console.log(`Removing temporary types directory: ${typesDir}`);
  fs.rmSync(typesDir, { recursive: true, force: true });
}
